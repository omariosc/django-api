For optimal viewing, see this file in `GitHub` or the `README.md` file: https://github.com/omariosc/django-api#readme

# Django API

[![Django CI](https://github.com/omariosc/django-api/actions/workflows/django.yml/badge.svg?branch=master)](https://github.com/omariosc/django-api/actions/workflows/django.yml)

This repository contains code for Coursework 2 of the COMP3011 Web Services & Web Data module.

## Important

### Domain Name

[https://sc20osc.pythonanywhere.com/](https://sc20osc.pythonanywhere.com/)

### Admin Credentials

```json
admin
{
    "username": "admin",
    "password": "admin",
}

ammar
{
    "username": "ammar",
    "password": "ammar",
}
```

To use the service as an admin, you may access the admin functions using [https://sc20osc.pythonanywhere.com/admin/](https://sc20osc.pythonanywhere.com/admin/) using the provided admin credentials. This will allow you to access and modify the database. Note that this will automatically make the changes on other impacted services also.

## Tasks

- Comments
- Documentation
- Testing
- MySQL database
- Auto backup database
- readme.txt
- README.md
- Report

## Database

The full database schema can be found, as generated by [Swagger](https://sc20osc.pythonanywhere.com/swagger) (see the _Schemas_ section).

![Database](db.png)

## API

The full API list can also be found, as generated by [Redoc](https://sc20osc.pythonanywhere.com) and by [Swagger](https://sc20osc.pythonanywhere.com/swagger).

![API](api.png)

### API Endpoints

To use the service with its API functionality, see generated documentation by [Redoc](https://sc20osc.pythonanywhere.com) or by [Swagger](https://sc20osc.pythonanywhere.com/swagger) for information on each endpoint including its method, request and response formats. The provided endpoints are;

- [https://sc20osc.pythonanywhere.com/api/flights/](https://sc20osc.pythonanywhere.com/api/flights/) (this supports GET, PUT, PATCH and DELETE)
- [https://sc20osc.pythonanywhere.com/api/bookings/](https://sc20osc.pythonanywhere.com/api/bookings/) (this supports GET, PUT, PATCH and DELETE)
- [https://sc20osc.pythonanywhere.com/api/airlines/](https://sc20osc.pythonanywhere.com/api/airlines/) (this supports GET only)
- [https://sc20osc.pythonanywhere.com/api/airports/](https://sc20osc.pythonanywhere.com/api/airports/) (this supports GET only)
- [https://sc20osc.pythonanywhere.com/api/cities/](https://sc20osc.pythonanywhere.com/api/cities/) (this supports GET only)
- [https://sc20osc.pythonanywhere.com/api/countries/](https://sc20osc.pythonanywhere.com/api/countries/) (this supports GET only)

### Query Filters

#### Flights

Users can filter flights based on query parameters. For example:

- `/api/flights/?departure_airport=LAX&destination_airport=JFK`
- `/api/flights/?airline=AA&base_price_min=100&base_price_max=300`
- `/api/flights/?departure_datetime_min=2023-05-01T00:00:00Z&departure_datetime_max=2023-05-31T23:59:59Z`
- `/api/flights/?departure_datetime_min=2023-05-09&arrival_datetime_max=2023-05-14`

The filters allow users to search for flights within a range of values for various parameters
such as departure datetime, arrival datetime, duration time, base price, total seats,
and available seats. Users can also filter by departure airport, destination airport, and airline.

#### Airports

Users can filter airports based on query parameters. For example:

- `/api/airports/?city=New York`
- `/api/airports/?country=US`
- `/api/airports/?region=US-NY`
- `/api/airports/?type=large_airport`
- `/api/airports/?latitude_min=40&latitude_max=45`
- `/api/airports/?longitude_min=-80&longitude_max=-70`
- `/api/airports/?elevation_min=100&elevation_max=200`
- `/api/airports/?continent=NA`

Note that the filtering is case-insensitive and uses the icontains lookup expression for text-based fields, which means it will match any airport containing the specified text. You can change the lookup expression to suit your needs.

### Simple Query Filters

- Airlines (e.g. using `?code=AA`)
- Bookings (e.g. using `?booking_ref=AGESIOEH&passport_number=130595&flight=AA19385`)
- Cities (e.g. using `?name=New York&country=US`)
- Countries (e.g. using `?name=US&continent=NA`)

See the `views.py` file for more information on the filters used.
