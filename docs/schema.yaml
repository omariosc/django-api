openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/airlines/:
    get:
      operationId: api_airlines_retrieve
      description: |-
        This API endpoint retrieves a list of all airlines or a specific airline, depending on the provided parameters.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - code: (optional) The unique code of the airline to be retrieved.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the 'code' parameter is provided and an airline with that code exists:
                    - HTTP status code: 200 (OK)
                    - JSON data: A serialized representation of the airline.
                - If the 'code' parameter is provided and an airline with that code does not exist:
                    - HTTP status code: 404 (Not Found)
                    - JSON data: An error message.
                - If the 'code' parameter is not provided:
                    - HTTP status code: 200 (OK)
                    - JSON data: A serialized list of all airlines.

        Example usage:
            To get a list of all airlines: GET /api/airlines/
            To get a specific airline: GET /api/airlines/?code=AA
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Airline'
          description: ''
  /api/airports/:
    get:
      operationId: api_airports_retrieve
      description: |-
        This API endpoint retrieves a list of all airports or specific airports based on provided parameters.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - ident: (optional) The unique identifier of the airport to be retrieved.
                - name: (optional) The name of the airport to be retrieved.
                - city: (optional) Filter by city.
                - country: (optional) Filter by country.
                - region: (optional) Filter by region.
                - type: (optional) Filter by airport type.
                - latitude_min and latitude_max: (optional) Filter by latitude range.
                - longitude_min and longitude_max: (optional) Filter by longitude range.
                - elevation_min and elevation_max: (optional) Filter by elevation range.
                - continent: (optional) Filter by continent.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the 'ident' and/or 'name' parameter is provided and an airport with those values exists:
                    - HTTP status code: 200 (OK)
                    - JSON data: A serialized representation of the airport.
                - If the 'ident' and/or 'name' parameter is provided and an airport with those values does not exist:
                    - HTTP status code: 404 (Not Found)
                    - JSON data: An error message.
                - If no 'ident' or 'name' parameter is provided:
                    - HTTP status code: 200 (OK)
                    - JSON data: A serialized list of all airports that match the other query parameters.

        Example usage:
            To get a list of all airports: GET /api/airports/
            To get a specific airport by ident: GET /api/airports/?ident=KLGA
            To get a specific airport by name: GET /api/airports/?name=LaGuardia
            To get a list of airports in New York: GET /api/airports/?city=New York
            To get a list of airports in the United States: GET /api/airports/?country=US
            To get a list of airports in North America: GET /api/airports/?continent=NA
            To get a list of large airports: GET /api/airports/?type=large_airport
            To get a list of airports in a latitude range: GET /api/airports/?latitude_min=40&latitude_max=45
            To get a list of airports in a longitude range: GET /api/airports/?longitude_min=-80&longitude_max=-70
            To get a list of airports in an elevation range: GET /api/airports/?elevation_min=100&elevation_max=200
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Airport'
          description: ''
  /api/bookings/:
    get:
      operationId: api_bookings_retrieve
      description: |-
        This API endpoint retrieves a list of all bookings or a specific booking based on the provided booking reference,
        flight code, or passport number.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - booking_ref: The unique reference of the booking to be retrieved.
                - flight: The unique code of the flight associated with the booking.
                - passport_number: The passport number of the passenger.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If a list of bookings is retrieved:
                    - HTTP status code: 200 (OK)
                    - JSON data: A list of booking objects.
                - If a specific booking is retrieved:
                    - HTTP status code: 200 (OK)
                    - JSON data: A booking object.
                - If no bookings are found:
                    - HTTP status code: 204 (No Content)
                    - JSON data: A message stating that no bookings are available.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
    post:
      operationId: api_bookings_create
      description: |-
        This API endpoint creates a new booking with the provided booking details.

        Parameters:
            request (Request): The Django REST framework request object.
                Request body (JSON):
                - booking_ref: The unique reference of the booking.
                - flight: The unique code of the flight associated with the booking.
                - passport_number: The passport number of the passenger.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the booking is created successfully:
                    - HTTP status code: 201 (Created)
                    - JSON data: The created booking object.
                - If the booking already exists or the flight is not found:
                    - HTTP status code: 400 (Bad Request)
                    - JSON data: An error message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Booking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
    patch:
      operationId: api_bookings_partial_update
      description: |-
        This API endpoint modifies an existing booking based on the provided booking reference.

        Parameters:
            request (Request): The Django REST framework request object.
                Request body (JSON):
                - booking_ref: The unique reference of the booking to be modified.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the booking is modified successfully:
                    - HTTP status code: 200 (OK)
                    - JSON data: The modified booking object.
                - If the booking does not exist:
                    - HTTP status code: 404 (Not Found)
                    - JSON data: An error message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
    delete:
      operationId: api_bookings_destroy
      description: |-
        This API endpoint deletes an existing booking based on the provided booking reference.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - booking_ref: The unique reference of the booking to be deleted.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the booking is deleted successfully:
                    - HTTP status code: 200 (OK)
                    - JSON data: A message stating that the booking was deleted.
                - If the booking or the flight does not exist:
                    - HTTP status code: 404 (Not Found)
                    - JSON data: An error message.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/cities/:
    get:
      operationId: api_cities_retrieve
      description: |-
        This API endpoint retrieves a list of all cities or specific cities based on the provided city name or country name.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - id: The ID of the city to be retrieved.
                - name: The name of the city to be retrieved.
                - country: The name of the country whose cities are to be retrieved.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If a list of cities is retrieved:
                    - HTTP status code: 200 (OK)
                    - JSON data: A list of city objects.
                - If a specific city or cities in a country are retrieved:
                    - HTTP status code: 200 (OK)
                    - JSON data: A city object or a list of city objects.
                - If no cities are found:
                    - HTTP status code: 204 (No Content)
                    - JSON data: A message stating that no cities are available.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
  /api/countries/:
    get:
      operationId: api_countries_retrieve
      description: |-
        This API endpoint retrieves a list of all countries or specific countries based on the provided country name or continent name.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - name: The name of the country to be retrieved.
                - continent: The name of the continent whose countries are to be retrieved.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If a list of countries is retrieved:
                    - HTTP status code: 200 (OK)
                    - JSON data: A list of country objects.
                - If a specific country or countries in a continent are retrieved:
                    - HTTP status code: 200 (OK)
                    - JSON data: A country object or a list of country objects.
                - If no countries are found:
                    - HTTP status code: 204 (No Content)
                    - JSON data: A message stating that no countries are available.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
  /api/flights/:
    get:
      operationId: api_flights_retrieve
      description: |-
        This API endpoint retrieves a list of all flights or specific flights based on provided parameters.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - flight_code: (optional) The unique code of the flight to be retrieved.
                - departure_airport: (optional) Filter by departure airport.
                - destination_airport: (optional) Filter by destination airport.
                - airline: (optional) Filter by airline.
                - base_price_min and base_price_max: (optional) Filter by base price range.
                - departure_datetime_min and departure_datetime_max: (optional) Filter by departure datetime range.
                - arrival_datetime_min and arrival_datetime_max: (optional) Filter by arrival datetime range.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the 'flight_code' parameter is provided and a flight with that code exists:
                    - HTTP status code: 200 (OK)
                    - JSON data: A serialized representation of the flight.
                - If the 'flight_code' parameter is provided and a flight with that code does not exist:
                    - HTTP status code: 404 (Not Found)
                    - JSON data: An error message.
                - If no 'flight_code' parameter is provided:
                    - HTTP status code: 200 (OK)
                    - JSON data: A serialized list of all flights that match the other query parameters.
                - If no flights match the provided parameters:
                    - HTTP status code: 204 (No Content)
                    - JSON data: An error message.

        Example usage:
            To get a list of all flights: GET /api/flights/
            To get a specific flight by flight_code: GET /api/flights/?flight_code=AA100
            To get a list of flights from LAX to JFK: GET /api/flights/?departure_airport=LAX&destination_airport=JFK
            To get a list of flights with a base price between $100 and $300: GET /api/flights/?base_price_min=100&base_price_max=300
            To get a list of flights with a departure datetime between 2023-05-01T00:00:00Z and 2023-05-31T23:59:59Z: GET /api/flights/?departure_datetime_min=2023-05-01T00:00:00Z&departure_datetime_max=2023-05-31T23:59:59Z
            To get a list of flights with an arrival datetime between 2023-05-01T00:00:00Z and 2023-05-31T23:59:59Z: GET /api/flights/?arrival_datetime_min=2023-05-01T00:00:00Z&arrival_datetime_max=2023-05-31T23:59:59Z
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
          description: ''
    post:
      operationId: api_flights_create
      description: |-
        This API endpoint creates a new flight with the provided details.

        Parameters:
            request (Request): The Django REST framework request object.
                Body parameters (all required):
                - flight_code: The unique code of the flight.
                - departure_airport: The departure airport of the flight.
                - destination_airport: The destination airport of the flight.
                - airline: The airline of the flight.
                - departure_datetime: The departure datetime of the flight.
                - arrival_datetime: The arrival datetime of the flight.
                - duration_time: The duration time of the flight.
                - base_price: The base price of the flight.
                - total_seats: The total seats available on the flight.
                - available_seats: The available seats on the flight at the time of creation.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the flight is created successfully:
                    - HTTP status code: 201 (Created)
                    - JSON data: A serialized representation of the new flight.
                - If the flight code already exists:
                    - HTTP status code: 400 (Bad Request)
                    - JSON data: An error message.
                - If the request data is invalid:
                    - HTTP status code: 400 (Bad Request)
                    - JSON data: A list of errors detailing what was wrong with the request data.

        Example usage:
            To create a new flight: POST /api/flights/ with the flight details in the request body.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Flight'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Flight'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
          description: ''
    patch:
      operationId: api_flights_partial_update
      description: |-
        This API endpoint modifies an existing flight's details with the provided information.

        Parameters:
            request (Request): The Django REST framework request object.
                Body parameters (optional):
                - departure_airport: The departure airport of the flight.
                - destination_airport: The destination airport of the flight.
                - airline: The airline of the flight.
                - departure_datetime: The departure datetime of the flight.
                - arrival_datetime: The arrival datetime of the flight.
                - duration_time: The duration time of the flight.
                - base_price: The base price of the flight.
                - total_seats: The total seats available on the flight.
                - available_seats: The available seats on the flight at the time of modification.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the flight is modified successfully:
                    - HTTP status code: 200 (OK)
                    - JSON data: A message stating that the flight was modified.
                - If the flight code does not exist:
                    - HTTP status code: 404 (Not Found)
                    - JSON data: An error message.
                - If the request data is the same as the current flight data:
                    - HTTP status code: 204 (No Content)
                    - JSON data: A message stating that no changes were made.
                - If the request data is invalid:
                    - HTTP status code: 400 (Bad Request)
                    - JSON data: A list of errors detailing what was wrong with the request data.

        Example usage:
            To modify an existing flight: PATCH /api/flights/ with the flight code and the new flight details in the request body.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFlight'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFlight'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFlight'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
          description: ''
    delete:
      operationId: api_flights_destroy
      description: |-
        This API endpoint deletes an existing flight based on the provided flight code.

        Parameters:
            request (Request): The Django REST framework request object.
                Query parameters:
                - flight_code (required): The unique code of the flight to be deleted.

        Returns:
            Response: A Django REST framework response object.
                Response data format:
                - If the flight is deleted successfully:
                    - HTTP status code: 200 (OK)
                    - JSON data: A message stating that the flight was deleted.
                - If the flight code does not exist:
                    - HTTP status code: 404 (Not Found)
                    - JSON data: An error message.
                - If the flight code is not provided:
                    - HTTP status code: 400 (Bad Request)
                    - JSON data: An error message indicating that the flight code is required.

        Example usage:
            To delete a flight: DELETE /api/flights/?flight_code=FLIGHT123
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    Airline:
      type: object
      description: Serializes the Airline model.
      properties:
        code:
          type: string
          maxLength: 3
        name:
          type: string
          maxLength: 100
        ip:
          type: string
          maxLength: 100
      required:
      - code
      - ip
      - name
    Airport:
      type: object
      description: Serializes the Airport model.
      properties:
        ident:
          type: string
          maxLength: 100
        name:
          type: string
          maxLength: 100
        region:
          type: string
          maxLength: 100
        size_type:
          type: string
          maxLength: 100
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        elevation:
          type: string
          maxLength: 100
        city:
          type: integer
      required:
      - city
      - elevation
      - ident
      - latitude
      - longitude
      - name
      - region
      - size_type
    Booking:
      type: object
      description: Serializes the Booking model.
      properties:
        booking_ref:
          type: string
          readOnly: true
        flight:
          type: string
        passport_number:
          type: integer
      required:
      - booking_ref
      - flight
      - passport_number
    City:
      type: object
      description: Serializes the City model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        country:
          type: string
      required:
      - country
      - id
      - name
    Country:
      type: object
      description: Serializes the Country model.
      properties:
        name:
          type: string
          maxLength: 255
        continent:
          type: string
          maxLength: 255
      required:
      - continent
      - name
    Flight:
      type: object
      description: Serializes the Flight model.
      properties:
        flight_code:
          type: string
          maxLength: 10
        departure_datetime:
          type: string
          format: date-time
        arrival_datetime:
          type: string
          format: date-time
        duration_time:
          type: string
        base_price:
          type: number
          format: double
        total_seats:
          type: integer
        available_seats:
          type: integer
        departure_airport:
          type: string
        destination_airport:
          type: string
        airline:
          type: string
      required:
      - airline
      - arrival_datetime
      - available_seats
      - base_price
      - departure_airport
      - departure_datetime
      - destination_airport
      - duration_time
      - flight_code
      - total_seats
    PatchedBooking:
      type: object
      description: Serializes the Booking model.
      properties:
        booking_ref:
          type: string
          readOnly: true
        flight:
          type: string
        passport_number:
          type: integer
    PatchedFlight:
      type: object
      description: Serializes the Flight model.
      properties:
        flight_code:
          type: string
          maxLength: 10
        departure_datetime:
          type: string
          format: date-time
        arrival_datetime:
          type: string
          format: date-time
        duration_time:
          type: string
        base_price:
          type: number
          format: double
        total_seats:
          type: integer
        available_seats:
          type: integer
        departure_airport:
          type: string
        destination_airport:
          type: string
        airline:
          type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
